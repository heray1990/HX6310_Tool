

// use DEBUG I2C
  A:8001_0000:0000_0000



// INP
  D:FFFF:0000_0014

// INP front TPG
//D:0008:0000_0001
  D:000C:0465_0898
  D:0010:2905_C02C
  D:0014:0438_0780
//D:0018:00FF_00F9  // color-ramp
  D:0018:00FF_00F2  // boarder + motion-bar
  D:001C:123D_1634
  D:0020:03CA_0222
  D:0024:0000_0000
  D:0028:0438_0780
//D:0030:000F_0010  // INP 1 path out
  D:0030:000F_0011  // INP 4 path out
  D:0008:0000_0001


// INP apricot TPG
//D:008C:6A04_0000  // pat_mode = 5
  D:008C:7204_0000  // pat_mode = 9
  D:0090:08CA_044C
  D:00A4:5260_0A16
  D:0098:0870_03C0
  D:009C:01E5_0444
  D:00A0:3FFF_FFFF
  D:00A4:3FFF_FFFF
  D:00A8:3FF0_0400
  D:00AC:0F00_0870
  D:00B0:0009_0000
  D:00B4:4000_0000
  D:00B8:0000_0000
  D:00BC:0000_0000
//D:00C0:0000_1000  // Bypass TP => 1
  D:00C0:0000_0000  // Bypass TP => 0



// ASIC_B input select (fpga only)
  D:FFFF:0000_0000
  D:00FC:0000_0000  // from INP 
//D:00FC:0000_0001  // from LVDS


// ASIC_B
  D:FFFF:0000_0010
  D:0020:0001_0061  // bypass ASIC B



// System
  D:FFFF:0000_0000
//D:0018:0000_0002  // Bypass FRC
  D:0018:0000_0000  // Through FRC
//D:00A8:0000_8000  // eo2fb_eo2fb_en => 1
  D:00A8:0000_0000  // eo2fb_eo2fb_en => 0



// PB2AXI
//D:FFFF:0000_000B
//D:0114:0000_0004  // release master



// toggle FRC all reset
  D:FFFF:0000_0000
//D:0010:FFFF_FC3F  // [9,8,7,6]
  D:0010:FFFF_EC3F  // [12,9,8,7,6]
//D:0010:FFFF_CC3F  // [13,12,9,8,7,6]
  D:0010:FFFF_FFFF



// FRC bank
  D:FFFF:0000_000F
  D:0044:0000_0001  // FRC PWDN = 1
//D:0044:0000_0000  // FRC PWDN = 0
  D:0080:0000_0001  // bypass XScale

  D:008C:0000_0000  // dbg_sel_frc
  D:0000:0000_0002  // ip = mcore
  D:0004:0000_00FF  // dbg_sel_mcore
  D:0008:0000_0002


  //
  // IP[00h] : frc output timing gen (To Disable Timing Gen)
  //
  D:0000:0000_0000
  D:0004:0000_0000
  D:0008:0000_0000  // en = 0
  D:0000:0000_00FF
  D:0004:0000_00FF
  D:0008:0000_0000  // double buffer load


  //
  // IP[02h] : mcore (To clear priority)
  //
  D:0000:0000_0002  // ip = mcore
  D:0004:0000_0000
  D:0008:0000_0000  // pri_sel_0
  D:0004:0000_0001
  D:0008:0000_0000  // pri_sel_1
  D:0004:0000_0002
  D:0008:0000_0000  // pri_sel_2
  D:0004:0000_0003
  D:0008:0000_0000  // pri_sel_3
  D:0004:0000_0004
  D:0008:0000_0000  // pri_sel_4
  D:0004:0000_0005
  D:0008:0000_0000  // pri_sel_5
  D:0004:0000_0006
  D:0008:0000_0000  // pri_sel_6
  D:0004:0000_0007
  D:0008:0000_0000  // pri_sel_7
  D:0004:0000_0008
  D:0008:0000_0000  // pri_sel_8
  D:0004:0000_0009
  D:0008:0000_0000  // pri_sel_9
  D:0004:0000_000A
  D:0008:0000_0000  // pri_sel_10
  D:0004:0000_000B
  D:0008:0000_0000  // pri_sel_11
  D:0004:0000_000C
  D:0008:0000_0000  // pri_sel_12
  D:0004:0000_000D
  D:0008:0000_0000  // pri_sel_13
  D:0004:0000_000E
  D:0008:0000_0000  // pri_sel_14
  D:0004:0000_000F
  D:0008:0000_0000  // pri_sel_15
  D:0004:0000_0010
  D:0008:0000_0000  // pri_sel_16
  D:0004:0000_0011
  D:0008:0000_0000  // pri_sel_17
  D:0004:0000_0012
  D:0008:0000_0000  // pri_sel_18
  D:0004:0000_0013
  D:0008:0000_0000  // pri_sel_19
  D:0004:0000_0014
  D:0008:0000_0000  // pri_sel_20
  D:0004:0000_0015
  D:0008:0000_0000  // pri_sel_21
  D:0004:0000_0016
  D:0008:0000_0000  // pri_sel_22
  D:0004:0000_0017
  D:0008:0000_0000  // pri_sel_23
  D:0004:0000_0018
  D:0008:0000_0000  // pri_sel_24


  //
  // IP[01h] : frdc ctrl
  //
  D:0000:0000_0001  // ip = frdc ctrl
  D:0004:0000_0000
//D:0008:0000_0001  // frdc mode (1 path)
  D:0008:0000_0002  // frdc mode (4 path)


  //
  // IP[02h] : mcore
  //
  D:0000:0000_0002  // ip = mcore
  D:0004:0000_0000
  D:0008:0000_0400  // pri_sel_0 = r0
  D:0004:0000_0001
  D:0008:0000_0800  // pri_sel_1
  D:0004:0000_0002
  D:0008:0000_1000  // pri_sel_2
  D:0004:0000_0003
  D:0008:0000_2000  // pri_sel_3
  D:0004:0000_0004
  D:0008:0000_0001  // pri_sel_4 = w0
  D:0004:0000_0005
  D:0008:0000_0002  // pri_sel_5
  D:0004:0000_0006
  D:0008:0000_0004  // pri_sel_6
  D:0004:0000_0007
  D:0008:0000_0008  // pri_sel_7
  D:0004:0000_0008
  D:0008:0000_0000  // pri_sel_8
  D:0004:0000_0009
  D:0008:0000_0000  // pri_sel_9
  D:0004:0000_000A
  D:0008:0000_0000  // pri_sel_10
  D:0004:0000_000B
  D:0008:0000_0000  // pri_sel_11
  D:0004:0000_000C
  D:0008:0000_0000  // pri_sel_12
  D:0004:0000_000D
  D:0008:0000_0000  // pri_sel_13
  D:0004:0000_000E
  D:0008:0000_0000  // pri_sel_14
  D:0004:0000_000F
  D:0008:0000_0000  // pri_sel_15
  D:0004:0000_0010
  D:0008:0000_0000  // pri_sel_16
  D:0004:0000_0011
  D:0008:0000_0000  // pri_sel_17
  D:0004:0000_0012
  D:0008:0000_0000  // pri_sel_18
  D:0004:0000_0013
  D:0008:0000_0000  // pri_sel_19
  D:0004:0000_0014
  D:0008:0000_0000  // pri_sel_20
  D:0004:0000_0015
  D:0008:0000_0000  // pri_sel_21
  D:0004:0000_0016
  D:0008:0000_8000  // pri_sel_22 = r5
  D:0004:0000_0017
  D:0008:0000_0020  // pri_sel_23 = w5
  D:0004:0000_0018
  D:0008:0000_0000  // pri_sel_24


  //
  // IP[02h] : frdc mcore
  //
  D:0000:0000_0002  // ip = mcore

  D:0004:0000_0030
  D:0008:0000_0040  // frdc_oif_req_dly

  D:0004:0000_0040
  D:0008:0001_0000  // frdc type(0: 2D_to_2D (2fb)         ), bit_num(0:10b)
//D:0008:0001_0600  // frdc type(6: Anti-tearing FRC (3fb) ), bit_num(0:10b)
  D:0004:0000_0041
  D:0008:0000_0000  // ba0
  D:0004:0000_0042
  D:0008:000E_E7AC  // ba1
  D:0004:0000_0043
  D:0008:001D_CF58  // ba2
  D:0004:0000_0044
  D:0008:002C_B704  // ba3
  D:0004:0000_0045
  D:0008:0007_73D6  // frdc size in
  D:0004:0000_0046
  D:0008:0007_73D6  // frdc size out
  D:0004:0000_0047
  D:0008:0000_0000  // frdc pixel offset
  D:0004:0000_0048
  D:0008:0000_03C0  // frdc hsize
  D:0004:0000_0049
  D:0008:0000_0870  // frdc vsize
  D:0004:0000_004A
  D:0008:0000_0070  // frdc inverse
  D:0004:0000_004B
  D:0008:0007_71E1  // frdc inverse addr
  D:0004:0000_004C
  D:0008:0000_0000  // frdc inverse addr2

  D:0004:0000_0050
  D:0008:0000_0000  // frdc out ba00
  D:0004:0000_0051
  D:0008:0000_0000  // frdc out ba01
  D:0004:0000_0052
  D:0008:000E_E7AC  // frdc out ba1
  D:0004:0000_0053
  D:0008:001D_CF58  // frdc out ba2
  D:0004:0000_0054
  D:0008:002C_B704  // frdc out ba3
  D:0004:0000_00A0
  D:0008:0007_73E5  // frdc ub size


  //
  // IP[00h] : frc output timing gen
  //
  D:0000:0000_0000
  D:0004:0000_0000
  D:0008:0000_0001  // en = 1

  D:0004:0000_0001
  D:0008:0016_044C  // hsync, htot
  D:0004:0000_0002
  D:0008:03C0_0060  // hsize, hstr
  D:0004:0000_0003
  D:0008:000A_08CA  // vsync, vtot
  D:0004:0000_0004
  D:0008:0870_0052  // vsize, vstr
  D:0004:0000_0005
  D:0008:0000_03E8  // reset count
  D:0004:0000_0006  
//D:0008:0000_0000  // sync sel = inp_vs_d1
//D:0008:0000_0001  // sync sel = freerun
//D:0008:0000_0002  // sync sel = inp_vs_m2
  D:0008:0000_0003  // sync sel = inp_vs_m2d5

  D:0004:0000_0016
  D:0008:0000_2AF8  // m2_vs_high     = htotal * vsync
  D:0004:0000_0017
  D:0008:0025_C3F8  // m2_vs_period   = htotal * vtotal
  D:0004:0000_0018
  D:0008:0000_2AF8  // m2p5_vs_high   = htotal * vsync
  D:0004:0000_0019
  D:0008:0025_C3F8  // m2p5_vs_period = htotal * vtotal
  D:0004:0000_001A
  D:0008:0000_2AF8  // m4_vs_high     = htotal * vsync
  D:0004:0000_001B
  D:0008:0025_C3F8  // m4_vs_period   = htotal * vtotal
  D:0004:0000_001C
  D:0008:0000_2AF8  // m5_vs_high     = htotal * vsync
  D:0004:0000_001D
  D:0008:0025_C3F8  // m5_vs_period   = htotal * vtotal

  D:0000:0000_00FF
  D:0004:0000_00FF
  D:0008:0000_0000  // double buffer load


  D:FFFF:0000_000F
//D:0044:0000_0001  // FRC PWDN = 1
  D:0044:0000_0000  // FRC PWDN = 0



// PB2AXI
  D:FFFF:0000_000B
  D:0114:0000_0004  // release master



// ASIC C
  D:FFFF:0000_0013
  D:000C:0001_8000  // bypass ASIC C


// Backend
  D:FFFF:0000_000E
  D:0004:0870_0118  // vsize = 2160, vde_gen_ext = 280(?)
  D:0008:060F_FFFF  // bypass[7] => 0 : bypass from backend input
                    // bypass[6] => 1 : bypass gamma & dithering
                    // bypass[5] => 1 : bypass from backend input

  D:0080:4A16_044C
  D:0084:08CA_03C0
  D:0088:C870_480A
//D:008C:2FFC_0240  // pat = 9
//D:008C:2FFC_0180  // pat = 5
  D:008C:6FFC_0180  // bypassTP = 1
  D:0090:3FFF_FFFF
  D:00DC:0000_0084


// OSD TP
//D:005C:E898_C02C  // tg_release_freerun = 1
  D:005C:6898_C02C  // tg_en = 0, from backend input
  D:0060:0465_0780
  D:0064:0438_2905
  D:0068:0000_0000

  D:0074:0000_FFF1
  D:0078:FFFF_FFFF
  D:007C:03CA_0222

//D:0000:0000_0005  // dbg=5   pi_SHR
//D:0000:0000_0014  // dbg=20  po_SHR
//D:0000:0000_0038  // dbg=55  pi_port_train


  A:18000000:0438_0780  //hsize,vsize
  A:18000004:00F0_C030  //
  A:18000010:0000_0800  //x step
  A:18000014:0000_0800  //y step
  A:18000018:0000_0000
  A:1800001C:0000_0000
  A:18000020:0000_0007
  A:18000024:0001_0000  //TS off
//A:18000024:0000_0000  //TS on
  A:1800002C:0000_00C0
  A:1800005C:0000_0000
  A:18000060:0000_0000
  A:18000064:0000_0000
  A:18000068:0000_0000

  A:18002000:0000_0001
  A:18003000:0000_0001

  A:18001000:0000_0001
  A:18001004:0028_044C  //htotal,hsync
  A:18001008:03C0_0050  //hstart,hsize
  A:1800100C:0005_0898  //vtotal,vsize
  A:18001010:0870_000A  //vstart,vsize
  A:18001014:0001_8605  //reset,count
  A:18001018:0000_0000
  A:1801F000:0000_0001  //double buffer load
  A:1801F018:0000_0000
  A:1801F000:0000_0001  //double buffer load


