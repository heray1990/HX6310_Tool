DEMUX:1
/////////////////////////////////////////////////////////////////////////////////////////////////////
//  AIP IP0670
///////////////

ID:02        //Device ID
FF:00        //Bank for I2C

//**************************************************************************************************
//********        PHY Setting                     **************************************************
//**************************************************************************************************

//>>>> 1st: Normal Register <<<<//
00:00        //[7]:PLL RST;[3]:PLL EN [6:4]:CDR RST;[2:0]:CDR EN.(0=reset or disable;1=no reset or enable)
01:00        //[5]:Deep color PLL EN.[4]Deep color PLL RST. [3]:Audio PLL EN.[2]:Audio PLL RST.
             //[1]:PLL in clk sel when AREG6[5:4]=11(0=ext clk;1=MHL CKOUT);
             //[0]:The limit of AREG20[2:0] ctl the PLL divider(0=only when AREG20[4]=1;1=Always).
02:00        //Reserved.
03:00        //EQ and MUX:[6:4]:Lane2~0 EQ EN; [2:0]:Lane2~0 MUX EN.
//04:00        //Reserved.
05:02 
      //>> PLL and CDR <<//
06:05        //[7]: Turn on cross-couple pair of CDR interpolator cell (1¡¦b0: Turn on ;  1¡¦b1: Turn off)
             //[6]: Lock selection for AREG6[0]=1¡¦b1 (1¡¦b0: PLL_LOCK_C ; 1¡¦b1: Half time of PLL_LOCK_F)
             //[5:4]: Input clock of CDR¡¦s PLL (2¡¦b00: TMDS_CK ; 2¡¦b01: XTAL_CK ; 2¡¦b10: MHL_DECCK ; 2¡¦b11: EXT_CK)
             //[3]: reset PLL when changing PLL bands (1¡¦b0: When changing PLL bands, reset PLL ; 1¡¦b1: When changing PLL bands, not reset PLL)
             //[2:1]: CDR bands selection (2¡¦b00: The same with PLL bands ; 2¡¦b01: 4 sections of CDR bands=3¡¦b000, 3¡¦b001, 3¡¦b011, 3¡¦b101 ; 2¡¦b10: 3 sections of CDR bands=3¡¦b001, 3¡¦b011, 3¡¦b101 ; 2¡¦b11: Set 3¡¦b000)
             //[0]: The option to reset CDR (1¡¦b0: Reset CDR just by AREG0[6:4] ; 1¡¦b1: Reset CDR by AREG0[6:5] or PLL_LOCK=1¡¦b0 „³ 1¡¦b1 It works with AREG6[6])
       //>> PLL <<//     
07:46        //PLL bandwidth : [7:4]: Charge pump current
             //                [3:2]: PLL reset time (2¡¦b00: 80ns ; 2¡¦b01: 5us ; 2¡¦b10: 20us ; 2¡¦b11: 50us)
             //                [1:0]: Low-pass filter resistor

08:61        //[7:6]: Set lock flag running time of three PLL@ AREG5[4]=1¡¦b1(00=4*512*(TMDS_CK_period);01=16*512*(TMDS_CK_period);10=64*512*(TMDS_CK_period);11=256*512*(TMDS_CK_period))
             //[5:4]: PLL VCO and analog divider current(00=75%;01=100%;10=125%;11=150%)
             //[3:2]: PLL VCO cell current for central frequency(00=75%;01=100%;10=125%;11=150%)
             //[1:0]: PLL V2I current(00=75%;01=100%;10=125%;11=150%)
       //=========//
       //>> CDR <<//
09:61        //CDR bandwidth:[7:6]:CDR phase detector current(00=75%;01=100%;10=125%;11=150%)
             //              [5]: Turn on cross-couple pair of CDR interpolator delay cell (0=turn off;1=turn on)
             //              [4]: Inverse CDR output clock(0=not inverse ; 1=Inverse)
             //              [3]: Select sampled clock of CDR filter automatically or manually(0=Automatically ; 1=Manually)
             //              [2]: Sampled clock of CDR filter when [3]=1¡¦b1(0=Sampled clock=PLL clock frequency divides 2 ; 1=Sampled clock=PLL clock frequency divides 4)
             //              [1:0]: CDR bandwidth(00=Count with one UP or DN;01=two;10=three;11=four)

0A:92        //[7:6]: CDR phase interpolator current(00=75%;01=100%;10=125%;11=150%)
             //[5:3]: CDR interpolator output clock swing for phase detector(000=75%;001=100%;010=125%;011=150%;100=175%;101=200%;110=225%;111=250%)
             //[2:0]: CDR phase detector rear part current control(000=75%;001=100%;010=125%;011=150%;100=175%;101=200%;110=225%;111=250%)
       //=========//
       //>> offset cancel <<//
0B:C0        //Offset cancellation control:[7:6]: Capacitor selection(00=1x;01=2x;10=3x;11=4x)
             //[5:3]: Offset cancellation output current(000=25%;001=50%;010=75%;011=100%;100=125%;101=150%;110=175%;111=200%)
             //[2:0]: Offset cancellation inner current(000=25%;001=50%;010=100%;011=200%;100=400%;other=800%)
       //===================//
       //>> EQ <<//
0C:15        //[7:6]: LN0_EQIN_SW[1:0], input pattern of lane0 equalizer(00=HDMI in data;01=MHL;10=PRBS gen.;11=No signal)
             //[5]: EQIN_SW, input pattern of lane1 and lane2 equalizer(0=HDMI ; 1=PRBS)
             //[4]: Enable offset cancellation(0=disable;1=enable)
             //[3:2]: The current of analog multiplexer after equalizer(00=80%;01=100%;10=120%;11=140%)
             //[1:0]: Equalizer current(00=80%;01=100%;10=120%;11=140%)
       //========//             
0D:07        //PRBS7
       //>> Audio PLL <<//
0E:1A        //[7:6]: Choose input clock of audio PLL(00=TMDS_CK;01=XTAL_CK;10=BIST_CK;11=MHL_PIXCK)
             //[5:4]: Audio PLL VCO current(00=75%;01=100%;10=125%;11=150%)
             //[3]: Turn on audio PLL control voltage error detection(0=Turn off;1=Trun on)
             //[2:0]: Audio PLL charge pump current(000=50%;001=75%;010=100%;011=125%;100=150%;101=175%;110=200%;111=225%)
       //===============//
       //>> Video PLL <<//              
0F:1A        //[7:6]: Choose input clock of deep color PLL (video PLL)(00=TMDS_CK;01=XTAL_CK;10=BIST_CK;11=MHL_PIXCK)
             //[5:4]: Deep color PLL VCO current(00=75%;01=100%;10=125%;11=150%)
             //[3]: Turn on deep color PLL control voltage error detection(0=Turn off;1=Trun on)
             //[2:0]: Deep color PLL charge pump current(000=50%;001=75%;010=100%;011=125%;100=150%;101=175%;110=200%;111=225%)
       //===============//
10:82        //[7:4]: DET_DIFF[3:0] of audio PLL SDM ; [3:0]: IN_DIFF[2:0] of audio PLL APR
//11:00        //Reserved
//12:00        //Reserved
//13:00        //Reserved
14:00        //BIST set
15:22        //BIST set
       //=========//
16:04        //[2:0]: Select dynamic debug output ADBG_DYN[3:0].(See Table 4-8)

//17:00  //nothing
//18:00  //nothing
//19:00  //nothing
//1A:00  //nothing
//1B:00  //nothing
//1C:00  //nothing
//1D:00  //nothing
//1E:00  //nothing
//1F:00  //nothing

//>>>> 2nd: Should support by controller,but instead of I2C in the test chip <<<<//

20:E1        //[7]: Let 20h~29h can be set by controller or I2C(0=controller ; 1=I2C)
             //[6]: Let RSTN_PLL(20h[0]) can be controlled by FPGA or I2C in test chip(0=FPGA ; 1=I2C)
             //[5]: Let EQ_PEAK[5:0] can be controlled by FPGA or I2C in test chip(0=FPGA ; 1=I2C)
             //[2]: MHL_MODE @ I2C(0=24bit mode ; 1=Pack-pixel mode)
             //[1]: DIP_PORT_SEL @ I2C (0=sel port0 ; 1=sel port1)
             //[0]: RSTN_PLL @ I2C(0=Reset CDR¡¦s PLL ; 1=Not reset)
             
22:00        //[6:4]: DIP_PLL_BAND[2:0](000=25~50MHz ; 010=50~100MHz ; 100=100~200MHz ; 101=200~300MHz
             //[2:0]: DIP_AUPLL_BAND[2:0](000=0~28MHz ; 001=28~40MHz ; 010=40~56MHz ; 011=56~80MHz ; 100=80~112MHz ; 101=112~160MHz ; 110=160~224MHz ; 111=224~300MHz)
       //>> EQ_PEAK[5:0] <<//
23:07        //(0=0dB ; 1=5dB ; 2=8dB ; 3=10dB; 7=12dB; B=14dB; F=16dB; 1F=19dB; 2F=21dB; 3F=24dB)
       //=========// 
//2A:00  //Reserved
//2B:00  //Reserved
//2C:00  //Reserved
//2D:00  //Reserved
//2E:00  //Reserved
//2F:00  //Reserved

//**************************************************************************************************
//********        Audio PLL setting               **************************************************
//**************************************************************************************************
//Audio PLL = TMDS CLK * N[19:0] / CTS[19:0] * 4 = 512 * Fs for DIP ; AIP use 128 * Fs
//For TMDS CLK = 340MHz
//29h~27h = CTS =>HDMI Spec. 1080P=148.5MHz 96K set N=12288==0x003000 ; CTS=148500==0x024414
29:02        //[3:0]:AUPLL_CTS[19:16]
28:44        //[7:0]:AUPLL_CTS[15:8]
27:14        //[7:0]:AUPLL_CTS[7:0]

//26h~24h = N
26:00
25:30
24:00

//**************************************************************************************************
//*******************************Deep Color PLL setting*********************************************
//**************************************************************************************************
       //>> Video PLL output=Video PLL input * (M[2:0]+1) / (N[2:0]+1) <<//
21:11        //[6:4]: VDPLL_M[2:0]
             //[2:0]: VDPLL_N[2:0]
             // 21h=11(24bit 1:1) ; =34(30bit 1:1.25) ; =12(36bit 1:1.5) ; =01(48bit 1:2)
       //================================================================// 

//>>>> 3rd:30h~3Fh are just only for test chip <<<<//

30:FF        //[7]: Enable 50ohm buffer @ HDMI RX ; [6]: Enable bandgap for LVDS/TTL lane2 ; [5]: Enable bandgap for LVDS/TTL lane1
             //[4]: Enable bandgap for LVDS/TTL lane0 @ HDMI RX ; [3]: Reset demux @ MHL ; [2]: Reset demux @ lane2
             //[1]: Reset demux @ lane1 ; [0]: Reset demux @ lane0
             
31:0A        //[7]: Lane2 type(0=HDMI;1=MHL) ; [6]: Lane1 type ; [5]: Lane0 type ; 
             //[3]: Switch test chip DBG[3:0] to AUDIO_CKOUT, >>HDMI_CKOUT[1:0],(0=Not switch ; 1=Switch to AUDIO_CKOUT, HDMI_CKOUT[1:0])
             //[2:0]: LVDS BANDGAP current BG_IP[2:0](000=50%;001=75%;010=100%;011=125%;100=150%;101=175%;110=200%;111=225%)
             
32:E1        //[7]: LVDS_EN @ lane2(0=TTL ; 1=LVDS);[6]: LVDS_EN @ lane1;[5]: LVDS_EN @ lane0
             //[3]: Swap @ lane2;[2]: Swap @ lane1;[1]: Swap @ lane0;
             //[0]: PULL_LVDS(0=Not pull low LVDS output ; 1=Pull low LVDS output)
             
33:00        //HDMI BIT SW and MHL SW for TEST
34:33
       //>> CKIN and CKOUT SW Function <<//
35:2A        //[7]: MHL CKOUT_SW ; [6]: MHL CKIN_SW
             //[5]: CKOUT_SW @ lane2 ; [4]: CKIN_SW @ lane2
             //[3]: CKOUT_SW @ lane1 ; [2]: CKIN_SW @ lane1
             //[1]: CKOUT_SW @lane0 ; [0]: CKIN_SW @ lane0
       //===============================//
36:44
37:78
38:00
39:33
//3A:00  //Reserved
//3B:00  //Reserved
//3C:00  //Reserved
//3D:00  //Reserved
//3E:00  //Reserved
//3F:00  //Reserved

//>>>> 4th:Stanby Register <<<<//

40:80        //[7]: Enable 24.576MHz crystal clock(0=EN;1=Dis) ; [6]: Reset logic(0=RST;1=no) ; [5]: Enable logic(0=EN;1=Dis)
             //[3]: Enable port1 clock path(0=EN;1=Dis) ; [2]: Enable port0 clock path(0=EN;1=Dis) ; 
             //[1]: Enable auto impedance matching circuit(0=EN;1=Dis) ; [0]: Enable bandgap(0=EN;1=Dis)
       //>> 50ohm Terminal Function <<//        
41:0F        //[7]: Enable 50ohm of port1 CK(0=EN;1=Dis) ; [6]: Enable 50ohm of port1 lane2 data ; [5]: Enable 50ohm of port1 lane1 data ; [4]: Enable common mode impedance of port1 lane0 data
             //[3]: Enable 50ohm of port0 CK ; [2]: Enable 50ohm of port0 lane2 data ; [1]: Enable 50ohm of port0 lane1 data ; [0]: Enable common mode impedance of port0 lane0 data
       //=============================//
       
42:40        //[7]: Enable differential impedance of port1 lane0 data(0=dis;1=en) ; [6]: Enable differential impedance of port0 lane0 data(0=dis;1=en)
             //[5]: Enable Zrxsense_term of port1 lane0 data(0=dis;1=en) ; [4]: Enable Zrxsense_term of port0 lane0 data(0=dis;1=en)
             //[3]: Port selection for HDMI/MHL(0=HDMI;1=MHL) ; [2]: Select port from inner logic or by PHY controller
             //[1]: Select PLL band from inner logic or PHY controller ; [0]: Select audio PLL band from inner logic or PHY controller
             
43:24        //Auto impedance matching circuit control
44:4A        //STD_REG44[7:0](HDMI clock)
45:41        //STD_REG45[7:0](MHL clock)

//>>>> 5th:  <<<<//

40:A7
40:E7

//>>>> 6th:  <<<<//

00:8F  //CDR lane0~2 RST=0
01:28  //Deep PLL RST=0 ; Audio PLL RST=0 
03:77  //Lane2~0 EQ Enable=1 ; Lane2~0 MUX Enable

//>>>> 7th:  <<<<//

00:FF

01:3C

05:C2

32:E0

//>>>> 8th:  <<<<//

05:F2

/////////////////////////////////////////////////////////////////////////////////////////////////////
DEMUX:0
D:FFFF:0000_0008    //hdmi initial
D:FFFF:0000_0008
D:0000:0020_1F00
D:0004:FFFF_0000
D:0008:0000_00C4   //because sys_clk=12.288MHz so Cnt=0C4
D:0070:000D_1600   //20 to 10 71h[4:0]fifo upper bound=16 + 72h[4:0]fifo lower bound=0D

D:FFFF:0000_0000    
D:00b8:0000_0003    
D:FFFF:0000_0003    //vbo
D:0010:E400_0402

D:FFFF:0000_0000    //Sys
D:0020:0018_091F    //Clk_o = FRC/4
D:FFFF:0000_000E    //backend
D:00DC:0000_0024    //2 lane div 1

D:FFFF:0000_0014 // INP
D:0030:000F_0011 // dual mode
D:0038:0000_0031
D:008C:7204_0000
D:0090:0465_0226
D:0094:1020_0510
D:0098:0438_01E0
D:009C:0222_03CB
D:00A4:3FFF_FFFF
D:00AC:0780_0438
D:00C0:0000_1000 // TP OFF

D:FFFF:0000_0010
D:0000:0000_0001
D:0004:0010_0226
D:0008:01E0_0020
//D:0004:0040_0898
//D:0008:0780_0080
D:000C:0005_0465
D:0010:0438_0010
D:0014:0000_0007
D:0018:0000_0000
D:0080:0000_0000
D:00FC:0000_0000

D:FFFF:0000_0000
D:0018:0000_0006
D:0020:0018_091F
D:00A8:0000_8000 // EO2FB ON
D:00AC:0438_01E0
D:00C0:00FF_0085
D:00C4:0200_00FF

D:FFFF:0000_0013
D:000C:0000_807F

D:FFFF:0000_000E
D:005C:2898_C02C
D:0080:2516_0226
D:0084:0465_01E0
D:0088:C438_240A
D:008C:6FFC_0240
D:0090:3FFF_FFFF
D:0094:0438_0780
D:00B4:0222_03CB
D:00DC:0000_0024
D:00E0:0438_01E0