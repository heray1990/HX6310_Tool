/////////////////////////////////////////////////////////////////////////////////////////////////////
//  AIP IP0670
//
//

ID:02        //Device ID
FF:00        //Bank for I2C
//VB tool BANK = 00
//I2C ID Address = 02 (HDMI RX and MHL RX are the same.)


//**************************************************************************************************
//********************************* PHY Setting ****************************************************
//**************************************************************************************************

//1st:Normal Register

00:00        //[7]:PLL RST;[3]:PLL EN [6:4]:CDR RST;[2:0]:CDR EN.(0=reset or disable;1=no reset or enable)

01:00        //[5]:Deep color PLL EN.[4]Deep color PLL RST. [3]:Audio PLL EN.[2]:Audio PLL RST.
             //[1]:PLL in clk sel when AREG6[5:4]=11(0=ext clk;1=MHL CKOUT);
             //[0]:The limit of AREG20[2:0] ctl the PLL divider(0=only when AREG20[4]=1;1=Always).
             
02:00        //Reserved.

03:00        //EQ and MUX:[6:4]:Lane2~0 EQ EN; [2:0]:Lane2~0 MUX EN.

04:00        //Reserved.

05:02

06:05
//[7]: Turn on cross-couple pair of CDR interpolator cell             
//  1¡¦b0: Turn on                                                    
//  1¡¦b1: Turn off                                                   
//[6]: Lock selection for AREG6[0]=1¡¦b1                              
//  1¡¦b0: PLL_LOCK_C                                                 
//  1¡¦b1: Half time of PLL_LOCK_F                                    
//[5:4]: Input clock of CDR¡¦s PLL                                    
//  2¡¦b00: TMDS_CK                                                   
//  2¡¦b01: XTAL_CK                                                   
//  2¡¦b10: MHL_DECCK                                                 
//  2¡¦b11: EXT_CK                                                    
//[3]: reset PLL when changing PLL bands                              
//  1¡¦b0: When changing PLL bands, reset PLL                         
//  1¡¦b1: When changing PLL bands, not reset PLL                     
//[2:1]: CDR bands selection                                          
//  2¡¦b00: The same with PLL bands                                   
//  2¡¦b01: 4 sections of CDR bands=3¡¦b000, 3¡¦b001, 3¡¦b011, 3¡¦b101
//  2¡¦b10: 3 sections of CDR bands=3¡¦b001, 3¡¦b011, 3¡¦b101         
//  2¡¦b11: Set 3¡¦b000                                               
//[0]: The option to reset CDR                                        
//  1¡¦b0: Reset CDR just by AREG0[6:4]                               
//  1¡¦b1: Reset CDR by AREG0[6:5] or PLL_LOCK=1¡¦b0 „³ 1¡¦b1         
//       It works with AREG6[6]                                       




07:46
//PLL bandwidth                                 
//[7:4]: Charge pump current                    
//[3:2]: PLL reset time                         
//  2¡¦b00: 80ns                                
//  2¡¦b01: 5us                                 
//  2¡¦b10: 20us                                
//  2¡¦b11: 50us                                
//[1:0]: Low-pass filter resistor               
//[7:4]							[1:0]										PLL bandwidth                     
//4¡¦b0000: 3.125uA	2¡¦b00: 12.4 kohm				820KHz    
//4¡¦b0001: 6.25uA		2¡¦b00: 12.4 kohm				1.37MHz   
//4¡¦b0010: 15.5uA		2¡¦b01: 6.2 kohm					1.95MHz   
//4¡¦b0011: 18.75uA	2¡¦b01: 6.2 kohm					2.2MHz    
//4¡¦b0100: 53uA			2¡¦b10/2¡¦b11: 3.1kohm		3.5MHz
//4¡¦b0111: 70uA			2¡¦b10/2¡¦b11: 3.1kohm		4.3MHz
//4¡¦b1000: 104uA		2¡¦b10/2¡¦b11: 3.1kohm		5.8MHz
//4¡¦b1011: 120uA		2¡¦b10/2¡¦b11: 3.1kohm		6.5MHz
//4¡¦b1100: 150uA		2¡¦b10/2¡¦b11: 3.1kohm		7.8MHz
//4¡¦b1111: 170uA		2¡¦b10/2¡¦b11: 3.1kohm		8.7MHz






08:73
09:61
0A:D2
0B:C0
0C:15
0D:07
0E:1A
0F:1A

10:82
11:00
12:00
13:00
14:00
15:22

16:04
//[7:3]: Reserved                                  
//[2:0]: Select dynamic debug output ADBG_DYN[3:0].
//     See Table 4-8                               



17:00
18:00
19:00
1A:00
1B:00
1C:00
1D:00
1E:00
1F:00



//2nd:Should support by controller,but instead of I2C in the test chip

20:E1
22:00
23:02
2A:00
2B:00
2C:00
2D:00
2E:00
2F:00


//********************************* Audio PLL ****************************************************
//CTS[19:0]=29h[3:0],28h,27h
//N[19:0]=26h[3:0],25h,24h

29:00
28:80
27:00
26:00
26:00
25:7D
24:D4


//********************************* Deep Color PLL ************************************************

21:11




//**************************************************************************************************

//3rd:30h~3Fh are just only for test chip

30:FF
31:02
32:E1
33:00
34:33
35:00  //default =AA ; modify FPGA =00
36:44
37:78
38:00
39:33
3A:00
3B:00
3C:00
3D:00
3E:00
3F:00


//4th:Stanby Register

40:80
41:0F
//[7]: Enable 50ohm of port1 CK
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[6]: Enable 50ohm of port1 lane2 data
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[5]: Enable 50ohm of port1 lane1 data
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[4]: Enable common mode impedance of port1 lane0 data
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[3]: Enable 50ohm of port0 CK
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[2]: Enable 50ohm of port0 lane2 data
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[1]: Enable 50ohm of port0 lane1 data
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[0]: Enable common mode impedance of port0 lane0 data
//  1¡¦b0: Disable
//  1¡¦b1: Enable





42:40
43:24
44:4A
45:41


//5th:

40:A7
40:E7
//[7]: Enable 24.576MHz crystal clock
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[6]: Reset logic
//  1¡¦b0: Reset
//  1¡¦b1: Not reset
//[5]: Enable logic
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[4]: Reserved
//[3]: Enable port1 clock path
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[2]: Enable port0 clock path
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[1]: Enable auto impedance matching circuit
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[0]: Enable bandgap
//  1¡¦b0: Disable
//  1¡¦b1: Enable



//6th:

00:8F

01:28

03:77
//[7]: Reserved
//[6]: Enable lane2 equalizer
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[5]: Enable lane1 equalizer
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[4]: Enable lane0 equalizer
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[3]: Reserved
//[2]: Enable lane2 MUX 
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[1]: Enable lane1 MUX
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[0]: Enable lane0 MUX
//  1¡¦b0: Disable
//  1¡¦b1: Enable







//7th:

00:FF
//[7]: Reset PLL
//  1¡¦b0: Reset
//  1¡¦b1: Not reset
//[6]: Reset lane2 CDR
//  1¡¦b0: Reset
//  1¡¦b1: Not reset
//[5]: Reset lane1 CDR
//  1¡¦b0: Reset
//  1¡¦b1: Not reset
//[4]: Reset lane0 CDR
//  1¡¦b0: Reset 
//  1¡¦b1: Not reset
//[3]: Enable PLL
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[2]: Enable lane2 CDR
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[1]: Enable lane1 CDR
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[0]: Enable lane0 CDR
//  1¡¦b0: Disable
//  1¡¦b1: Enable





01:3C
//[7:6]: Reserved                                          
//[5]: Enable deep color PLL                               
//  1¡¦b0: Disable                                         
//  1¡¦b1: Enable                                          
//[4]: Reset deep color PLL                                
//  1¡¦b0: Reset                                           
//  1¡¦b1: Not reset                                       
//[3]: Enable audio PLL                                    
//  1¡¦b0: Disable                                         
//  1¡¦b1: Enable                                          
//[2]: Reset audio PLL                                     
//  1¡¦b0: Reset                                           
//  1¡¦b1: Not reset                                       
//[1]: PLL input clock selection when AREG6[5:4]=2¡¦b11    
//  1¡¦b0: EXT_CLK                                         
//  1¡¦b1: MHL_CKOUT                                       
//[0]: The limit of AREG20[2:0] controlling the PLL divider
//  1¡¦b0: Only when AREG20[4]=1¡¦b1                       
//  1¡¦b1: Always 





05:C2

32:E0
//[7]: LVDS_EN @ lane2
//  1¡¦b0: TTL
//  1¡¦b1: LVDS
//[6]: LVDS_EN @ lane1
//  1¡¦b0: TTL
//  1¡¦b1: LVDS
//[5]: LVDS_EN @ lane0
//  1¡¦b0: TTL
//  1¡¦b1: LVDS
//[4]: Reserved
//[3]: Swap @ lane2
//[2]: Swap @ lane1
//[1]: Swap @ lane0
//[0]: PULL_LVDS
//  1¡¦b0: Not pull low LVDS output
//  1¡¦b1: Pull low LVDS output
//
//  This LVDS circuit needs to set 1¡¦b1 first, then 1¡¦b0.



//8th:

05:F2
//[7]: Enable TESTOUTP and TESTOUTN for high speed signal
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[6]: Enable prbs7 detection
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[5]: Enable prbs7 detection flag for TEST
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[4]: Enable lock detection flag of all PLL for TEST
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[3]: Set prbs7 error counter to zero
//  1¡¦b0: Normal 
//  1¡¦b1: Set the counter to zero
//[2]: Enable EXT_CK
//  1¡¦b0: Disable
//  1¡¦b1: Enable   
//[1]: Enable CDR¡¦s PLL VCO initial reset
//  1¡¦b0: Disable
//  1¡¦b1: Enable
//[0]: Reserved




//Check 63h[7][3] = 1


//**************************************************************************************************
//**************************************************************************************************