

// use DEBUG I2C
  A:8001_0000:0000_0000



// System
  D:FFFF:0000_0000
// System 20h
// [26]    clk_pix_1_2 = {*HDMI, HDMI/2}
// [25:24] clk_pix_1_2_4 = {*FRC/2, HDMI, HDMI/4, FRC/4}
// [22:21] clk_frc_i = {*FRC/2, FRC/4, HDMI, 0}
// [20:19] clk_frc_i_s_x8 = {FRC/2, FRC/4, HDMI/4, *PLLS}
// [18:16] clk_frc_o = {*FRC/2, FRC, HDMI/4, HDMI/2, PLLS}
// [14:11] clk_o = {FRC/8, FRC/4, *FRC/2, 3=HDMI/4, 7=HDMI/2, 11=PLLS}
// [10:8]  clk_o2 = {FRC/8, *FRC/4, HDMI/8, HDMI/4, PLLS/2}
// [6:4]   clk_o2_vbo = {FRC/8, *FRC/4, HDMI/8, HDMI/4, PLLS/2}
// [3]     clk_s = {PLLS/8, *PLLS/4}
// [2]     clk_s_apb = {PLLS/8, *PLLS/4}
// [1]     clk_s_ahb = {PLLS/4, *PLLS/2}
// [0]     clk_s_cpu = {PLLS/2, *PLLS}
  D:0020:0338_111F
//D:0018:0000_0002  // Bypass FRC
  D:0018:0000_0000  // Through FRC
//D:00A8:0000_8000  // eo2fb_eo2fb_en => 1
  D:00A8:0000_0000  // eo2fb_eo2fb_en => 0



// PB2AXI
//D:FFFF:0000_000B
//D:0114:0000_0004  // release master



// toggle FRC all reset
  D:FFFF:0000_0000
//D:0010:FFFF_FC3F  // [9,8,7,6]
//D:0010:FFFF_EC3F  // [12,9,8,7,6]
//D:0010:FFFF_CC3F  // [13,12,9,8,7,6]
  D:0010:FFFF_FFFF



// FRC bank
  D:FFFF:0000_000F
  D:0044:0000_0001  // FRC PWDN = 1
//D:0044:0000_0000  // FRC PWDN = 0
  D:0080:0000_0001  // bypass XScale

  D:008C:0000_001A  // dbg_sel_frc
  D:0000:0000_0002  // ip = mcore
  D:0004:0000_00FF  // dbg_sel_mcore
  D:0008:0000_0002


  //
  // IP[00h] : frc output timing gen (To Disable Timing Gen)
  //
  D:0000:0000_0000
  D:0004:0000_0000
  D:0008:0000_0000  // en = 0
  D:0000:0000_00FF
  D:0004:0000_00FF
  D:0008:0000_0000  // double buffer load


  //
  // IP[02h] : mcore (To clear priority)
  //
  D:0000:0000_0002  // ip = mcore
  D:0004:0000_0000
  D:0008:0000_0000  // pri_sel_0
  D:0004:0000_0001
  D:0008:0000_0000  // pri_sel_1
  D:0004:0000_0002
  D:0008:0000_0000  // pri_sel_2
  D:0004:0000_0003
  D:0008:0000_0000  // pri_sel_3
  D:0004:0000_0004
  D:0008:0000_0000  // pri_sel_4
  D:0004:0000_0005
  D:0008:0000_0000  // pri_sel_5
  D:0004:0000_0006
  D:0008:0000_0000  // pri_sel_6
  D:0004:0000_0007
  D:0008:0000_0000  // pri_sel_7
  D:0004:0000_0008
  D:0008:0000_0000  // pri_sel_8
  D:0004:0000_0009
  D:0008:0000_0000  // pri_sel_9
  D:0004:0000_000A
  D:0008:0000_0000  // pri_sel_10
  D:0004:0000_000B
  D:0008:0000_0000  // pri_sel_11
  D:0004:0000_000C
  D:0008:0000_0000  // pri_sel_12
  D:0004:0000_000D
  D:0008:0000_0000  // pri_sel_13
  D:0004:0000_000E
  D:0008:0000_0000  // pri_sel_14
  D:0004:0000_000F
  D:0008:0000_0000  // pri_sel_15
  D:0004:0000_0010
  D:0008:0000_0000  // pri_sel_16
  D:0004:0000_0011
  D:0008:0000_0000  // pri_sel_17
  D:0004:0000_0012
  D:0008:0000_0000  // pri_sel_18
  D:0004:0000_0013
  D:0008:0000_0000  // pri_sel_19
  D:0004:0000_0014
  D:0008:0000_0000  // pri_sel_20
  D:0004:0000_0015
  D:0008:0000_0000  // pri_sel_21
  D:0004:0000_0016
  D:0008:0000_0000  // pri_sel_22
  D:0004:0000_0017
  D:0008:0000_0000  // pri_sel_23
  D:0004:0000_0018
  D:0008:0000_0000  // pri_sel_24


  //
  // IP[01h] : frdc ctrl
  //
  D:0000:0000_0001  // ip = frdc ctrl
  D:0004:0000_0000
//D:0008:0000_0001  // frdc mode (1 path)
  D:0008:0000_0002  // frdc mode (4 path)


  //
  // IP[02h] : mcore
  //
  D:0000:0000_0002  // ip = mcore
  D:0004:0000_0000
  D:0008:0000_0400  // pri_sel_0 = r0
  D:0004:0000_0001
  D:0008:0000_0800  // pri_sel_1
  D:0004:0000_0002
  D:0008:0000_1000  // pri_sel_2
  D:0004:0000_0003
  D:0008:0000_2000  // pri_sel_3
  D:0004:0000_0004
  D:0008:0000_0001  // pri_sel_4 = w0
  D:0004:0000_0005
  D:0008:0000_0002  // pri_sel_5
  D:0004:0000_0006
  D:0008:0000_0004  // pri_sel_6
  D:0004:0000_0007
  D:0008:0000_0008  // pri_sel_7
  D:0004:0000_0008
  D:0008:0000_0000  // pri_sel_8
  D:0004:0000_0009
  D:0008:0000_0000  // pri_sel_9
  D:0004:0000_000A
  D:0008:0000_0000  // pri_sel_10
  D:0004:0000_000B
  D:0008:0000_0000  // pri_sel_11
  D:0004:0000_000C
  D:0008:0000_0000  // pri_sel_12
  D:0004:0000_000D
  D:0008:0000_0000  // pri_sel_13
  D:0004:0000_000E
  D:0008:0000_0000  // pri_sel_14
  D:0004:0000_000F
  D:0008:0000_0000  // pri_sel_15
  D:0004:0000_0010
  D:0008:0000_0000  // pri_sel_16
  D:0004:0000_0011
  D:0008:0000_0000  // pri_sel_17
  D:0004:0000_0012
  D:0008:0000_0000  // pri_sel_18
  D:0004:0000_0013
  D:0008:0000_0000  // pri_sel_19
  D:0004:0000_0014
  D:0008:0000_0000  // pri_sel_20
  D:0004:0000_0015
  D:0008:0000_0000  // pri_sel_21
  D:0004:0000_0016
  D:0008:0000_8000  // pri_sel_22 = r5
  D:0004:0000_0017
  D:0008:0000_0020  // pri_sel_23 = w5
  D:0004:0000_0018
  D:0008:0000_0000  // pri_sel_24


  //
  // IP[02h] : frdc mcore
  //
  D:0000:0000_0002  // ip = mcore

  D:0004:0000_0030
  D:0008:0000_0040  // frdc_oif_req_dly

  D:0004:0000_0040
  D:0008:0000_0000  // frdc type(0: 2D_to_2D (2fb)         ), bit_num(0:8b)
//D:0008:0000_0600  // frdc type(6: Anti-tearing FRC (3fb) ), bit_num(0:8b)
  D:0004:0000_0041
  D:0008:0000_0000  // ba0
  D:0004:0000_0042
  D:0008:000B_E168  // ba1
  D:0004:0000_0043
  D:0008:0017_C2D0  // ba2
  D:0004:0000_0044
  D:0008:0023_A438  // ba3
  D:0004:0000_0045
  D:0008:0005_F0B4  // frdc size in
  D:0004:0000_0046
  D:0008:0005_F0B4  // frdc size out
  D:0004:0000_0047
  D:0008:0000_0000  // frdc pixel offset
  D:0004:0000_0048
  D:0008:0000_03C0  // frdc hsize
  D:0004:0000_0049
  D:0008:0000_0870  // frdc vsize
  D:0004:0000_004A
  D:0008:0000_01D0  // frdc inverse
  D:0004:0000_004B
  D:0008:0005_EEBF  // frdc inverse addr
  D:0004:0000_004C
  D:0008:0000_0000  // frdc inverse addr2

  D:0004:0000_0050
  D:0008:0000_0000  // frdc out ba00
  D:0004:0000_0051
  D:0008:0000_0000  // frdc out ba01
  D:0004:0000_0052
  D:0008:000B_E168  // frdc out ba1
  D:0004:0000_0053
  D:0008:0017_C2D0  // frdc out ba2
  D:0004:0000_0054
  D:0008:0023_A438  // frdc out ba3
  D:0004:0000_00A0
  D:0008:0005_F0C3  // frdc ub size


  //
  // IP[00h] : frc output timing gen
  //
  D:0000:0000_0000
  D:0004:0000_0000
  D:0008:0000_0001  // en = 1

  D:0004:0000_0001
  D:0008:0016_044C  // hsync, htot
  D:0004:0000_0002
  D:0008:03C0_0060  // hsize, hstr
  D:0004:0000_0003
  D:0008:000A_08CA  // vsync, vtot
  D:0004:0000_0004
  D:0008:0870_0052  // vsize, vstr
  D:0004:0000_0005
  D:0008:0000_03E8  // reset count
  D:0004:0000_0006  
//D:0008:0000_0000  // sync sel = inp_vs_d1
//D:0008:0000_0001  // sync sel = freerun
  D:0008:0000_0003  // sync sel = inp_vs_m2d5

  D:0004:0000_0016
  D:0008:0000_2AF8  // m2_vs_high     = htotal * vsync
  D:0004:0000_0017
  D:0008:0025_C3F8  // m2_vs_period   = htotal * vtotal
  D:0004:0000_0018
  D:0008:0000_2AF8  // m2p5_vs_high   = htotal * vsync
  D:0004:0000_0019
  D:0008:0025_C3F8  // m2p5_vs_period = htotal * vtotal
  D:0004:0000_001A
  D:0008:0000_2AF8  // m4_vs_high     = htotal * vsync
  D:0004:0000_001B
  D:0008:0025_C3F8  // m4_vs_period   = htotal * vtotal
  D:0004:0000_001C
  D:0008:0000_2AF8  // m5_vs_high     = htotal * vsync
  D:0004:0000_001D
  D:0008:0025_C3F8  // m5_vs_period   = htotal * vtotal

  D:0000:0000_00FF
  D:0004:0000_00FF
  D:0008:0000_0000  // double buffer load


  D:FFFF:0000_000F
//D:0044:0000_0001  // FRC PWDN = 1
  D:0044:0000_0000  // FRC PWDN = 0



// PB2AXI
  D:FFFF:0000_000B
  D:0114:0000_0004  // release master


